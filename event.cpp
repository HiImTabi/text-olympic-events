#include <cstdlib>		// For srand() and rand()
#include <map>
#include <ctime>
#include <locale.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <unistd.h>
#include <vector>
#include "athlete.h"
#include "runner.h"
#include "jumper.h"
#include "thrower.h"
using namespace std;

extern string cg; 	// Terminal colour code (gold)
extern string cb; 	// Terminal colour code (blue)
extern string c0;	// Reset Terminal colour

map<float,string> runnerslist; 	// MAP of athletes and their distance, height or time
map<float,string> jumperslist;
map<float,string> throwerslist;


	//athlete *userathlete;
	//int athleteNo = 0;
	//int eventsize = 7; // 8 minus user athlete


bool genAthletes(vector<athlete*> vecAth) { 					// (Create athletes and fill competitors event) Print out competitors

	cout << "Finding event...\n";
	// for (int i = 0; i < eventsize; i++) { 				// (For automatic athlete creation) Create random athletes based on max size
	// 	if (sport == "Running") new_athlete = new runner();
	// 	else if (sport == "Jumping") new_athlete = new jumper();
	// 	else if (sport == "Throwing") new_athlete = new thrower();
		
	// 	runners.push_back(new_athlete); // Add to competitors
	// }
	
	//event->addAthlete(userathlete); // Add user athlete in 8th spot

	cout << "Event ready\n\nCompetitors:\n";
	for (int i = 0; i < vecAth.size(); i++) {	// Print out names of competitors
		cout << (i+1) << ". " << vecAth[i]->getName() << endl;
	}
	cout << endl;
	// cout << "8. " << (vecAth[i]->getName() << endl; // Print out user created competitor
	// cout << "---------------------------\n";
	return true;

}

void mapRunners(vector<athlete*> vecAth) { 					// Add competitors to map to find winner
	
	runnerslist.clear();							// Clear previous mapped values
	for (int i = 0; i < vecAth.size(); ++i) {
		float performance = rand() % 2500;
		float perfdiv = performance/1000;
		float skill = vecAth[i]->getLevel();
		float skilldiv = skill/5;
		
		float runtime = 12 + perfdiv - skilldiv;
		string name = vecAth[i]->getName();

		runnerslist[runtime] = name;					// mapname[key] = value;
	}
	// Add athletes to MAP with: running-time & name
	// Running time = (12secs + random 2500ms) minus (skillLevel / 5)
	// This makes skilled athletes more likely to get a faster time but leaves room for random performance
}

void mapThrowers(vector<athlete*> vecAth) {
	
	throwerslist.clear();
	for (int i = 0; i < vecAth.size(); ++i) {
		float performance = rand() % 100;
		float perfdiv = performance/10;
		float skill = vecAth[i]->getLevel();
		
		float distance = 70 + perfdiv + skill;
		string name = vecAth[i]->getName();

		throwerslist[distance] = name;
	}
	// Add athletes to MAP with: distance & name
	// Distance = (70 + random 10m) plus skill
}

void mapJumpers(vector<athlete*> vecAth) {

	jumperslist.clear();
	for (int i = 0; i < vecAth.size(); ++i) {
		float performance = rand() % 250;
		float perfdiv = performance/100;
		float skill = vecAth[i]->getLevel();
		float skillmul = skill/5;

		float height = 5 + perfdiv + skillmul;
		string name = vecAth[i]->getName();

		jumperslist[height] = name;
	}
	// Add athletes to MAP with: height & name
	// Distance = (5 + random 2.5m) plus (skill / 5)
}

void runningEvent(vector<athlete*> runners) {
	// runnerslist[75]="Jim Quickfeet";
	// runnerslist[73]="Ben H";
	// runnerslist[44]="Tom Third";
	// runnerslist[39]="Hagrid Forthus"; 	// Adding to map

	genAthletes(runners);
	
	cout << cg << "On your marks";
	for (int i = 0; i < 3; i++) { cout << "." << flush; usleep(1000000); } 	// Print out consecutive dots waiting 1 second between each
	cout << "\nSet";
	for (int i = 0; i < 3; i++) { cout << "." << flush; usleep(1000000); }
	cout << "\nGo!" << c0 << "\n\n";
	
	mapRunners(runners);
	


	cout << "[                                                  ]\r"; 	// Race progress bar
	for (int i = 0; i < 50; i++) {
		if (i==0) cout << "[" << cg; 					// If loading at 0% write [ bracket and set colour
		cout << "\u25ae" << flush; 					// Block character (U+2590)
		usleep(40000);
	}

	cout << c0 << "] Race Finished\n\nPlacings:\n";
	


	int i = 0;
	for (auto const& x : runnerslist) {					// Automatically loop through runnerslist MAP (to compile use -std=c++11)
		i++;
		cout << i;
		switch (i) {
			case 1: cout << "st . "; break;
			case 2: cout << "nd . "; break;
			case 3: cout << "rd . "; break;
			default: cout << "th . "; break;
		}
		cout << cb << x.second << c0 << " "; 				// Prints athlete name in blue
		for (int d = 0; d < (20 - x.second.length()); d++) cout << "."; // Prints out a number of periods based on name-length to line up times equally
		cout << " " << x.first << " seconds" << endl; 			// Prints time and measurement
		
		//if (x->second == userathlete->getName()) position = i; // (For autogenerated athletes) If athlete is user athlete, their position is i
	}
	i = 0;
	
	// switch (position) {		// For userathlete method if against autogenerated athletes
	// 	case 1: cout << userathlete->getName() << " won 1st place!" << endl;
	// 	case 2: cout << userathlete->getName() << " came in 2nd place!" << endl;
	// 	case 3: cout << userathlete->getName() << " made 3rd place!" << endl;
	// 	case 4: cout << userathlete->getName() << " came 4th!" << endl;
	// 	case 5: cout << userathlete->getName() << " came 5th!" << endl;
	// 	default: cout << userathlete->getName() << " unsuccessfully came " << position << "th" << endl;
	// }
}

void  jumpingEvent(vector<athlete*> jumpers) {

	genAthletes(jumpers);
	
	cout << cg << "Round 1";
	for (int i = 0; i < 3; i++) { cout << "." << flush; usleep(100000); } 	// Print out consecutive dots waiting 1 second between each
	cout << "\nRound 2";
	for (int i = 0; i < 3; i++) { cout << "." << flush; usleep(100000); }
	cout << "\nFinals";
	for (int i = 0; i < 3; i++) { cout << "." << flush; usleep(1000000); }
	cout << endl << c0 << endl;
	
	mapJumpers(jumpers);
	
	

	cout << "[                                                  ]\r"; 	// Race progress bar
	for (int i = 0; i < 50; i++) {
		if (i==0) cout << "[" << cg; 					// Write [ bracket and set colour
		cout << "\u25ae" << flush; 					// Block character (U+2590)
		usleep(40000);
	}
	
	cout << c0 << "] Jumps Finished\n\nPlacings:\n";
	


	int i = 0;
	for (auto z = jumperslist.rbegin(); z != jumperslist.rend(); z++) {	// Automatically loop through jumperslist MAP. This will go through from highest to lowest keys (to compile use -std=c++11)
		i++;
		cout << i;	// Position
		switch (i) {	// Placing suffix
			case 1: cout << "st . "; break;
			case 2: cout << "nd . "; break;
			case 3: cout << "rd . "; break;
			default: cout << "th . "; break;
		}
		cout << cb << z->second << c0 << " ";
		for (int d = 0; d < (20 - z->second.length()); d++) cout << "."; // cout a number of periods based on name-length to line up heights equally
		cout << " " << z->first << " metres" << endl;
	}
	i = 0;
	
}

void throwingEvent(vector<athlete*> throwers) {

	genAthletes(throwers);
	
	cout << cg << "Round 1";
	for (int i = 0; i < 3; i++) { cout << "." << flush; usleep(100000); } 	// Print out consecutive dots waiting 1 second between each
	cout << "\nRound 2";
	for (int i = 0; i < 3; i++) { cout << "." << flush; usleep(100000); }
	cout << "\nFinals";
	for (int i = 0; i < 3; i++) { cout << "." << flush; usleep(1000000); }
	cout << endl << c0 << endl;
	
	mapThrowers(throwers);
	
	
	
	cout << "[                                                  ]\r"; 	// Race progress bar
	for (int i = 0; i < 50; i++) {
		if (i==0) cout << "[" << cg; 					// If loading at 0, cout [ bracket and colour code
		cout << "\u25ae" << flush; 					// Block character (U+2590)
		usleep(40000);
	}
	
	cout << c0 << "] Throws Finished\n\nPlacings:\n";


	
	int i = 0;
	for (auto y = throwerslist.rbegin(); y != throwerslist.rend(); y++) {	// Automatically loop through throwerslist MAP, from highest to lowest keys
		i++;
		cout << i;	// Position
		switch (i) {	// Placing suffix
			case 1: cout << "st . "; break;
			case 2: cout << "nd . "; break;
			case 3: cout << "rd . "; break;
			default: cout << "th . "; break;
		}
		cout << cb << y->second << c0 << " "; 					// Athlete name
		for (int d = 0; d< (20 - y->second.length()); d++) cout << "."; // Number of periods based on name to line up throw distances
		cout << " " << y->first << " metres" << endl; 			// Distance
	}
	i = 0;
		
}